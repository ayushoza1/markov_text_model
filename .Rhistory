set.seed(0);y <-rt(100,df=4)
print(mean(y))
print(sd(y))
ii <- which(y > mean(y) + 2*sd(y) | y < mean(y) - 2*sd(y))
print(ii)
xs <- rep("", length(y) - length(ii))
set.seed(0);y <-rt(100,df=4)
print(mean(y))
print(sd(y))
y <- y[-(y > mean(y) + 2*sd(y))]
set.seed(0);y <-rt(100,df=4)
print(mean(y))
print(sd(y))
y <- y[-(y > mean(y) + 2*sd(y))]
print(mean(y))
set.seed(0);y <-rt(100,df=4)
print(mean(y))
print(sd(y))
y <- y[-(y > mean(y) + 2*sd(y))]
print(mean(y))
set.seed(0);y <-rt(100,df=4)
print(mean(y))
print(sd(y))
y <- y[-(y > mean(y) + 2*sd(y))]
print(mean(y))
libruary(rjags)
library(rjags)
removeoutlier <- function(y, k=2) {
y <- y[-(y > mean(y) + 2*sd(y)) & y < mean(y) + 2*sd(y))]
print(y)
}
y <- c(1,2,3,4,5,6,7,8,15)
removeoutlier <- function(y, k=2) {
y <- y[-(y > mean(y) + 2*sd(y)) & y < mean(y) + 2*sd(y))]
print(y)
}
y <- c(1,2,3,4,5,6,7,8,15)
removeoutlier <- function(y, k=2) {
y <- y[-((y > mean(y) + 2*sd(y)) & y < mean(y) - 2*sd(y)))]
print(y)
}
y <- c(1,2,3,4,5,6,7,8,15)
removeoutlier <- function(y, k=2) {
y <- y[-((y > mean(y) + 2*sd(y)) & y < mean(y) - 2*sd(y))]
print(y)
}
removeoutlier(c(1,2,3,4,5,6,7,8,15))
y <- c(1,2,3,4,5,6,7,8,15)
removeoutlier <- function(y, k=2) {
y <- y[-(y > mean(y) + 2*sd(y))]
print(y)
}
removeoutlier(c(1,2,3,4,5,6,7,8,15))
y <- c(1,2,3,4,5,6,7,8,15)
y <- y[-2]
print(y)
y <- c(1,2,3,4,5,6,7,8,15)
y <- y[-15]
print(y)
set.seed(0);y <-rt(100,df=4)
indx <- which(mean(y) - 2*sd(y) < y & y < mean(y) + 2*sd(y))
print(indx)
y <- y[-indx]
set.seed(0);y <-rt(100,df=4)
indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
print(indx)
y <- y[-indx]
set.seed(0);y <-rt(100,df=4)
print(mean(y))
indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
y <- y[-indx]
print(mean(y))
removeoutlier <- function(y, k=2)
{indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
y <- y[-indx])
print(y)
}
removeoutlier <- function(y, k=2)
{indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
y <- y[-indx]
print(y)
}
removeoutlier(c(1,2,3,4,5,6,7,8,15))
removeoutlier <- function(y, k=2)
{indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
y <- y[-indx]
print(mean(y)
}
removeoutlier(c(1,2,3,4,5,6,7,8,15))
removeoutlier <- function(y, k=2)
{indx <- which(mean(y) - 2*sd(y) < y & y > mean(y) + 2*sd(y))
y <- y[-indx]
print(mean(y))
}
removeoutlier(c(1,2,3,4,5,6,7,8,15))
tolower?
match?
set.seed(5); n <-2000
w <-runif(n)
A <-matrix(runif(n*n),n,n)
system.time(B <-diag(w) %*% A )
set.seed(5); n <-2000
w <-runif(n)
A <-matrix(runif(n*n),n,n)
system.time(B <-diag(w) %*% A )
print(w)
diag(5)
?range
w <-runif(n)
print(w)
print(diag(w))
?diag
print(diag(5)
print(diag(5))
print(diag(5))
print(diag(5,2)
print(diag(5,2))
print(diag(5,2))
range(w)
print(B)
print(A)
set.seed(5); n <-2000
w <-runif(n)
A <-matrix(runif(n*n),n,n)
system.time(B <-diag(w) %*% A )
print(A)
A <-matrix(runif(n*n),n,n)
A
print(A[1,1])
print(A[1:6,1:6])
print(A[1:6,1:6])
print(diag(w)[1:6,1:6])
print(diag(B)[1:6,1:6])
print(B[1:6,1:6])
range(A)
print(w)
range(w)
a <-factor(sample(c("fred","george","sue","ann"),20,replace=TRUE)); a
a <-factor(sample(c("fred","george","sue","ann"),20,replace=TRUE)); a
?factor
?sample
b <-factor(a, levels = c("ann","sue","fred","george")); b
as.numeric(a)
as.numernic(b)
as.numeric(b)
print(w)
C <- w*A
set.seed(5); n <-2000
w <-runif(n)
A <-matrix(runif(n*n),n,n)
system.time(B <-diag(w) %*% A )
C <- w*A
C == A
identical(C, B)
C == B
set.seed(5); n <-2000
w <-runif(n)
A <-matrix(runif(n*n),n,n)
system.time(B <-diag(w) %*% A )
C <- w*A
identical(C, B)
system.time(C <- w*A)
?levels
a1 <- levels(a)
a1
an <- as.numeric(a)
an
a1
c <- factor(an, a1)
c
c <- factor(a1, an)
a1[1] == an[1]
a2 <- as.numeric(a1)
a1 <- levels(a)
an <- as.numeric(a)
a2 <- as.numeric(a1)
c <- a1[a]
c
c == a
?rnorm
x<-rnorm(20);z<-rnorm(20);y<-rnorm(20)
If z != 0 & (y/z , 0 | z < 1) x <- x^2
if z != 0 & (y/z , 0 | z < 1) x <- x^2
For (i in 1:20)
if z[i] != 0 & (y[i]/z[i] , 0 | z[i] < 1) x[i] <- x[i]^2
for (i in 1:20)
if z[i] != 0 & (y[i]/z[i] , 0 | z[i] < 1) {x[i] <- x[i]^2} }
for (i in 1:20)
if (z[i] != 0 & (y[i]/z[i] , 0 | z[i] < 1)) x[i] <- x[i]^2}
for (i in 1:20)
if (z[i] != 0 & (y[i]/z[i] < 0 | z[i] < 1)) x[i] <- x[i]^2}
for (i in 1:20)
if (z[i] != 0 & (y[i]/z[i] < 0 | z[i] < 1)) x[i] <- x[i]^2
x<-rnorm(20);z<-rnorm(20);y<-rnorm(20)
print(z)
for (i in 1:20)
if (z[i] != 0 & (y[i]/z[i] < 0 | z[i] < 1)) x[i] <- x[i]^2
print(z)
x<-rnorm(20);z<-rnorm(20);y<-rnorm(20)
print(x)
for (i in 1:20)
if (z[i] != 0 & (y[i]/z[i] < 0 | z[i] < 1)) x[i] <- x[i]^2
print(x)
y <- ln(x) - 1/x
y <- log(x) - 1/x
y <- function(x) {log(x) - 1/x}
x0 <- -1
x1 <- 1
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- function(b) {}
for(i in 1:100)
z <- (x1 + x0)/2
if (y(z) > 0) x1 <- z else x0 <- z
x1
x0
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- function(b) {}
for(i in 1:1000000000)
z <- (x1 + x0)/2
if (y(z) > 0) x1 <- z else x0 <- z
x1
x0
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- function(b) {}
for(i in 1:1000000)
z <- (x1 + x0)/2
if (y(z) > 0) x1 <- z else x0 <- z
x1
x0
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
for(i in 1:1000000)
z <- (x1 + x0)/2
if (y(z) > 0) x1 <- z else x0 <- z
x1
x0
z <- (x1 + x0)/2
z
y(z)
x1 <- z
x1
z <- (x1 + x0)/2
z
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- (x1 + x0)/2
for(i in 1:20)
z <- (x1 + x0)/2
if (y(z) > 0) x1 <- z else x0 <- z
print(z)
z <- (x1 + x0)/2
z
for(i in 1:20)
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) x1 <- z else x0 <- z
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- (x1 + x0)/2
for(i in 1:20) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
print(z)}
y <- function(x) {log(x) - 1/x}
x0 <- 0.1
x1 <- 10
z <- (x1 + x0)/2
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
x1
x0
rootfinder <- function(y <-function(x) , x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}return(x1)
}
rootfinder <- function(y <-function(x) , x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}return(x1)
rootfinder <- function(y <-function(x) , x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}return(x1)
}}
rootfinder <- function(y), x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}return(x1)
}}
rootfinder <- function(y, x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}return(x1)
}}
rootfinder <- function(y, x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
}
rootfinder(log(x) - 1/x, 0.1, 10)
rootfinder(x^2 - 4, 0.1, 10)
y <- function(x, b=2, a=2) {x^b - e^(a*x) + 2}
rootfinder <- function(x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}print(x1)
}
y <- function(x, b=2, a=2) {x^b - e^(a*x) + 2}
rootfinder <- function(x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
}
rootfinder(0.1, 10)
y <- function(x, b=2, a=2) {x^b - exp()^(a*x) + 2}
rootfinder <- function(x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
}
rootfinder(0.1, 10)
y <- function(x, b=2, a=2) {x^b - exp(a*x) + 2}
rootfinder <- function(x0, x1) {
for(i in 1:100) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
}
rootfinder(0.1, 10)
y <- function(x, b=2, a=2) {x^b - exp(a*x) + 2}
rootfinder <- function(x0, x1) {
for(i in 1:10000) {
z <- (x1 + x0)/2
print(z)
if (y(z) > 0) {
x1 <- z
} else {
x0 <- z
}
}
}
rootfinder(-100, 100)
weight <- c(5,5.2, 5.5, 6)
Numberbroke <- c(2, 6, 9 , 11, 12)
employ.data <- data.frame(weight, Numberbroke)
weight <- c(5,5.2, 5.5, 5.7,6)
Numberbroke <- c(2, 6, 9 , 11, 12)
employ.data <- data.frame(weight, Numberbroke)
plot(weight,Numberbroke)
plot(weight,Numberbroke)
Numberbroke2 <- log(Numberbroke)
plot(weight,Numberbroke2)
Numberbroke2 <- exp(Numberbroke)
plot(weight,Numberbroke2)
Numberbroke2 <- 1/Numberbroke
plot(weight,Numberbroke2)
Numberbroke2 <- log(Numberbroke)
plot(weight,Numberbroke2)
weight2 <- log(weight)
plot(weight2,Numberbroke)
setwd("/Users/AyushOza/Documents/Edinburgh/StatisticalProgramming/SP-Assesment1")
a <-scan("1581-0.txt",what="character",skip=156)
n <-length(a)
a <-a[-((n-2909):n)] ## strip license
split_punct <- function(x, y, z, l, m, n, o) {
##split comma punctuation
a <- grep(y, x, fixed= TRUE) ##which elements of x contain punctuation y
b <- gsub(y, "", x, fixed = TRUE) ##remove punctuation from x
c <- rep("", length(x)+length(a)) ##creates new vector to store split punctuation
d <- a + 1:length(a) ##where should punctuation marks go
c[d] <- y ##insert punctuation marks
c[-d] <- b ##insert text without punctuation marks
##split full stop punctuation
aa <- grep(z, c, fixed= TRUE) ##which elements of x contain punctuation y
bb <- gsub(z, "", c, fixed = TRUE) ##remove punctuation from x
cc <- rep("", length(c)+length(aa)) ##creates new vector to store split punctuation
dd <- aa + 1:length(aa) ##where should punctuation marks go
cc[dd] <- z ##insert punctuation marks
cc[-dd] <- bb ##insert text without punctuation marks
##split semi-colon stop punctuation
aaa <- grep(l, cc, fixed= TRUE) ##which elements of x contain punctuation y
bbb <- gsub(l, "", cc, fixed = TRUE) ##remove punctuation from x
ccc <- rep("", length(cc)+length(aaa)) ##creates new vector to store split punctuation
ddd <- aaa + 1:length(aaa) ##where should punctuation marks go
ccc[ddd] <- l ##insert punctuation marks
ccc[-ddd] <- bbb ##insert text without punctuation marks
##split exlamation mark punctuation
aaaa <- grep(m, ccc, fixed= TRUE) ##which elements of x contain punctuation y
bbbb <- gsub(m, "", ccc, fixed = TRUE) ##remove punctuation from x
cccc <- rep("", length(ccc)+length(aaaa)) ##creates new vector to store split punctuation
dddd <- aaaa + 1:length(aaaa) ##where should punctuation marks go
cccc[dddd] <- m ##insert punctuation marks
cccc[-dddd] <- bbbb ##insert text without punctuation marks
##split colon mark punctuation
aaaaa <- grep(n, cccc, fixed= TRUE) ##which elements of x contain punctuation y
bbbbb <- gsub(n, "", cccc, fixed = TRUE) ##remove punctuation from x
ccccc <- rep("", length(cccc)+length(aaaaa)) ##creates new vector to store split punctuation
ddddd <- aaaaa + 1:length(aaaaa) ##where should punctuation marks go
ccccc[ddddd] <- n ##insert punctuation marks
ccccc[-ddddd] <- bbbbb ##insert text without punctuation marks
##split question mark punctuation
aaaaaa <- grep(o, ccccc, fixed= TRUE) ##which elements of x contain punctuation y
bbbbbb <- gsub(o, "", ccccc, fixed = TRUE) ##remove punctuation from x
cccccc <- rep("", length(ccccc)+length(aaaaaa)) ##creates new vector to store split punctuation
dddddd <- aaaaaa + 1:length(aaaaaa) ##where should punctuation marks go
cccccc[dddddd] <- o ##insert punctuation marks
cccccc[-dddddd] <- bbbbbb ##insert text without punctuation marks
}
New_text <- split_punct(a, ",",".", ";", "!", ":", "?")
low_text <- tolower(New_text) ##Lower Case all elements in bible text vector
Unique_words <- unique(low_text) ##Vector of all  unique words created
z <- match(low_text, Unique_words) ##What position of bible is in Unique words vector
No_words <- tabulate(z) ##Frequency of bible text
Thousand_No_words_freq <- No_words[No_words > 89] ##Imposes lower limit to generate only 1000 words
print(length(Thousand_No_words_freq)) ##1000 words check
b <- Unique_words[match(Thousand_No_words_freq, No_words)]
print(b)
com_txt <- match(low_text, b)  ##matches lower case bible text with vector b to find indices of common words in bible text
com_txt
com_txt_indx <- 1:length(com_txt)
com_txt_indx
com_txt_shift <- rep(NA, length(com_txt))
com_txt_shift[com_txt_indx] <- com_txt[com_txt_indx + 1]
com_txt_shift
com_pairs_vector <- cbind(com_txt, com_txt_shift)
com_pairs_vector
com_pairs <- rowSums(cbind(com_txt, com_txt_shift)) ##calculates sum of rows after creating 2 column matrix of indices of subsequent words
com_pairs
no_na <- com_pairs[!is.na(com_pairs)] ##removes the NA values from the sum of rows
no_na
C <- matrix(0:0, len_no_na, len_no_na)
len_no_na <- length(no_na) ##calculate the number of word pairs
C <- matrix(0:0, len_no_na, len_no_na)
len_no_na
